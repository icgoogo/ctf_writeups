from z3 import *

input = [BitVec(f"input_{i}", 64) for i in range(23)]

solver = Solver()

for i in range(23):
    solver.add(input[i] >= 0x20, input[i] <= 0x7E)

solver.add(
    input[0xB] * -0x19
    + input[8] * 0x31
    + input[10] * 0xBB
    + -0x9C2A
    + input[1] * 0x39
    + input[2] * 3
    + input[0x16] * 0xD7
    + input[9] * -0xBD
    + input[0xC] * -0x47
    + input[0xD] * 0xB7
    + input[0xF] * -0x9B
    + input[3] * 0x73
    + input[0x13] * -0x95
    + input[0xE] * 0xC6
    + input[4] * 0x9A
    + input[0x11] * -0x66
    + input[0x10] * 0x7C
    + input[0x12] * 0xB9
    + input[6] * -0xAA
    + input[5] * -0x6A
    + input[0x15] * 0xE1
    + input[0x14] * -0xA6
    + input[7] * -0xB5
    + input[0] * -0xB7
    == 0
)

solver.add(
    input[0x15] * -0x55
    + input[0xE] * -0xE5
    + input[8] * -0xAE
    + input[6] * -0x58
    + input[0x14] * 0x7D
    + input[1] * -0x3C
    + input[0xF] * 0xE0
    + input[10] * 0xFC
    + input[2] * -0x5E
    + input[0x12] * -0xE0
    + input[5] * 0xEE
    + input[0x10] * 0xE7
    + input[7] * -0x61
    + input[0xB] * -0x89
    + input[4] * -0x80
    + input[0]
    - 0xFD
    + input[0xC] * -0x9E
    + 0x9A2E
    + input[0x16] * 2
    + input[0x16] * -0x10
    + input[0x13] * -0x11
    + input[0x11] * 0x30
    + input[0xD] * 0x83
    + input[9] * -0xDE
    + input[3] * 0xE2
    == 0
)

solver.add(
    input[0x10] * -0x39
    + input[0x16] * 0xC6
    + input[0x15] * -0x6C
    + input[9] * 0xD4
    + input[0xF] * -0xE2
    + input[0xD] * 0xC5
    + input[0x14] * 0x91
    + input[2] * 0x84
    + input[1] * 0x32
    + input[0xE] * 0x86
    + -0x3124D
    + input[5] * 0xD2
    + input[0x11] * 0xEA
    + input[0xB] * 0x1B
    + input[0x12] * 0x97
    + input[3] * 0xF0
    + input[4] * -0x8A
    + input[0xC] * 0x95
    + input[0x13] * 0x9F
    + input[7] * -0x29
    + input[8] * 0xB3
    + input[0]
    - 0x31
    + input[10] * 0xD1
    + input[6] * 0x32
    == 0
)

solver.add(
    input[7] * 0x5F
    + input[10] * 0x60
    + input[0x14] * 0x8D
    + input[0xC] * 0xAB
    + input[6] * -0x1A
    + input[0xE] * 0xCB
    + input[2] * 0x57
    + input[0x13] * -0x8D
    + input[0x16] * -0xBA
    + input[0xF] * 0xA9
    + input[0x10] * -0x14
    + input[5] * 0x52
    + input[0x11] * -0x23
    + input[1] * -0x68
    + input[0x15] * 199
    + input[0x12] * 0x57
    + input[0xD] * 0xEB
    + input[8] * -0xA8
    + input[9] * 0x85
    + input[0]
    - 0x62
    + -0x20C1E
    + input[4] * 0xAF
    + input[3] * -0x26
    + input[0xB] * 0xFB
    == 0
)

solver.add(
    input[0xB] * 0x23
    + input[3] * -0x80
    + input[0x12] * 0xD0
    + input[0xD] * 0x8A
    + -0x1B8ED
    + input[0]
    - 0x51
    + input[2] * 0x8C
    + input[1] * 4
    + input[0x13] * 0x86
    + input[4] * 0xF0
    + input[5] * -0xC4
    + input[9] * -0x55
    + input[0x14] * 0xD8
    + input[0x11] * -0xB5
    + input[0xE] * -0x14
    + input[7] * 0xEA
    + input[10] * -0xC3
    + input[8] * 0xEB
    + input[0xF] * 0xBA
    + input[0x10] * -0xF5
    + input[0x15] * 0xE7
    + input[0xC] * 0x97
    + input[0x16] * 0x97
    + input[6] * -0x4E
    == 0
)

solver.add(
    input[0xC] * 0xD6
    + input[0x11] * -0x80
    + input[3] * 0x21
    + input[0xF] * -0xE8
    + input[10] * 0xD
    + input[4] * -0x7B
    + input[0x12] * 0x5A
    + input[0x13] * 0xDA
    + input[6] * -0x66
    + input[1] * -0x98
    + input[8] * 0x23
    + input[0x14] * 0x16
    + input[0x15] * -0x89
    + input[9] * -0xBA
    + input[7] * 0x53
    + input[0xB] * 0x6E
    + input[2] * 0x8E
    + input[5] * -0xE5
    + input[0xD] * 0xC5
    + input[0x10] * -7
    + input[0x16] * -0xEE
    + input[0] * 0xED
    + input[0xE] * 0xAB
    + -0x3DA5
    == 0
)

solver.add(
    input[1] * 0xA8
    + input[7] * -0xA6
    + (
        (
            input[6] * 0x7A
            + input[2] * -0x50
            + input[0x12] * 0xDD
            + input[4] * -0xA7
            + input[5] * 0x8B
            + input[0xC] * -0x26
            + input[8] * -0x8C
            + input[0x10] * -0x9F
            + input[10] * -0xC6
        )
        - input[0x16]
    )
    + input[0xE] * -0x35
    + input[9] * 0xE
    + input[0x14] * -0x6F
    + input[0xB] * 0x91
    + 0xB2A6
    + input[0x11] * -0x8D
    + input[0xD] * -0xD
    + input[3] * 0x39
    + input[0] * -0xCC
    + input[0xF] * -0x45
    + input[0x13] * 0xE9
    + input[0x15] * -0x6A
    == 0
)

solver.add(
    input[0xE] * 0xE
    + input[0x15] * 0xEB
    + input[10] * 0x12
    + input[0x13] * 0xA3
    + input[3] * 0xA5
    + input[4] * 0xB3
    + input[0xF] * -0x10
    + input[0xC] * -0x4D
    + input[2] * -0x65
    + input[0x10] * 0xC1
    + input[0x16] * 0x43
    + -0x20FDC
    + input[0x11] * 0xEB
    + input[0x14] * 0xB4
    + input[5] * 0x33
    + input[0xD] * -0xE7
    + input[9] * 0x7A
    + input[0] * -0x42
    + input[1] * 0xCA
    + input[7] * 0xCA
    + input[8] * 0x35
    + input[0xB] * 0x4E
    + input[0x12] * 0x4D
    + input[6] * -0xBE
    == 0
)

solver.add(
    input[0x11] * -199
    + input[10] * -0x4E
    + input[5] * -0xD8
    + input[0xD] * -0x17
    + input[7] * 0xC5
    + input[0xE] * 0x43
    + input[0x10] * 0xC4
    + input[0xF] * 0xAA
    + 0x4867
    + input[1] * -0xF5
    + input[3] * -0xA1
    + input[9] * 0x55
    + input[0x15] * 0x67
    + input[0xC] * -0x4E
    + input[0x13] * 8
    + input[0]
    - 0xD3
    + input[0x16] * -0xB2
    + input[8] * 0x2D
    + input[0xB] * -0xF
    + input[4] * 0xD1
    + input[6] * 0xF2
    + input[2] * 0xF0
    + input[0x14] * -0x5B
    + input[0x12] * 0x47
    == 0
)

solver.add(
    input[0x15] * 0xED
    + input[0xE] * 0x5B
    + input[4] * -0xF
    + input[9] * -0xFD
    + input[6] * 99
    + input[2] * -0xD1
    + input[0] * 0xF7
    + input[0x13] * 0xC3
    + input[0xF] * -0x6F
    + input[8] * 0xCA
    + input[0x10] * 0x4A
    + input[0x14] * 0xF9
    + input[3] * 0xD3
    + -0x130F0
    + input[0x11] * -0xFC
    + input[0x16] * -0xDA
    + input[5] * 0x56
    + input[10] * 0x3B
    + input[0xB] * 0x87
    + input[0xD] * -0x3A
    + input[0xC] * -0xA9
    + input[0x12] * 0xBB
    + input[1] * 0xB4
    + input[7] * 0x8F
    == 0
)

solver.add(
    input[0xF] * -0x20
    + input[0x16] * -0x22
    + input[0x15] * -0x7B
    + input[0xB] * -99
    + input[0x13] * 0x86
    + input[0xE] * 0x9C
    + input[5] * 0x89
    + input[0xD] * 0xE3
    + input[0x10] * -0x7C
    + input[3] * -0x9C
    + 0x8354
    + input[0] * -0x45
    + input[1] * -0x51
    + input[0x11] * -0x7D
    + input[7] * -0xA7
    + input[6] * 0xAF
    + input[8] * -0xCF
    + input[0x12] * -0xBF
    + input[0x14] * 0x22
    + input[4] * -0x3A
    + input[10] * -0x47
    + input[0xC] * -0x5D
    + input[2] * 0xFE
    + input[9] * 0xC9
    == 0
)

solver.add(
    input[10] * 0xCC
    + input[0x13] * 0x33
    + input[2] * -0x69
    + input[3] * -0xA3
    + input[0x10] * 0x60
    + input[5] * 0xEA
    + input[0xB] * -0xB5
    + input[0xC] * 0x2A
    + input[0x14] * 0xF1
    + input[6] * 0xB1
    + input[0xE] * -0x14
    + input[9] * 0x86
    + input[0x12] * -0x65
    + -0x53C7
    + input[1] * -0x48
    + input[4] * -0x30
    + input[0xF] * -0xDE
    + input[0x15] * -0x3E
    + input[0] * 0x57
    + input[8] * -0x37
    + input[0xD] * 0x5A
    + input[0x16] * 0x6C
    + input[0x11] * 0xD6
    + input[7] * -0xE2
    == 0
)

solver.add(
    input[4] * 0x39
    + input[8] * 0x23
    + input[3] * -0x4E
    + input[0xB] * -0x99
    + input[0xE] * 0x47
    + input[6] * -0xA7
    + input[9] * 0x74
    + input[0x14] * 2
    + 0x2D4F
    + input[0x12] * -0x50
    + input[0xD] * -0xB8
    + input[0x16] * -0x4F
    + input[0x10] * -0x31
    + input[0xF] * 0xF2
    + input[0] * -7
    + input[0xC] * -0xA4
    + input[0x11] * 0xC4
    + input[7] * -0x28
    + input[0x13] * -0xB8
    + input[5] * 0xF0
    + input[1] * 0x1A
    + input[2] * -0x84
    + input[10] * 0x8D
    + input[0x15] * -2
    == 0
)

solver.add(
    input[4] * 0xA8
    + input[7] * 0xE1
    + input[0x12] * -0x1A
    + input[2] * -0x3D
    + input[0xF] * -0xC9
    + input[0x16] * -0x7F
    + input[0] * 0x2C
    + 0xEB6
    + input[0xB] * 0x71
    + input[0x13] * -0x8F
    + input[0x10] * -0xDD
    + input[10] * -0xE1
    + input[6] * -0xBB
    + input[0x14] * 0x48
    + input[0xE] * -0xB6
    + input[0xD] * 0xDC
    + input[3] * 0xF2
    + input[0x15] * -0x88
    + input[0xC] * -0x2E
    + input[0x11] * 3
    + input[5] * 0xB8
    + input[9] * 0x8C
    + input[8] * -0x77
    + input[1]
    + input[1] * -8
    == 0
)

solver.add(
    input[3] * 0xAD
    + input[2] * 0x82
    + input[0xF] * 0xA7
    + input[7] * 0xD0
    + input[0x14] * -0x4F
    + input[0xC] * -0x91
    + input[0x11] * -0x5A
    + input[0x13] * -0x100
    + input[0x10] * 0x27
    + input[8] * 0xEC
    + input[0xB] * 0x3C
    + input[6] * -0x4A
    + input[5] * -0x1B
    + input[4] * -0x47
    + input[9] * 0x8C
    + input[0] * -0x8E
    + input[0x16] * 0x65
    + input[10] * -0xB9
    + input[0x15] * 0x74
    + input[0xD] * -0x86
    + input[0xE] * 0x9E
    + input[1] * 0xBB
    + input[0x12] * -0x48
    == 0x6469
)

solver.add(
    input[0x12] * -0xC0
    + input[4] * 0xE7
    + input[5] * 9
    + input[8] * 0xA4
    + input[0x15] * 0xF6
    + input[2] * 0xD9
    + input[0x11] * 0x57
    + input[0xC] * -0x88
    + input[3] * 0xDD
    + input[0x10] * -0x8A
    + input[6] * -0x97
    + input[1] * 0x57
    + input[0x13] * 0xE2
    + input[7] * 0x61
    + input[0x16] * 0x6C
    + input[0x14] * -0xD0
    + -0x1E27D
    + input[0xF] * 0x46
    + input[9] * 0xF0
    + input[0] * 0x5A
    + input[0xD] * -0x52
    + input[10] * 0xB9
    + input[0xB] * 0xB4
    + input[0xE] * -0xF8
    == 0
)

solver.add(
    input[3] * 0xC
    + input[0xE] * 0x85
    + input[6] * -0xA9
    + input[0xB] * -0x36
    + input[0x13] * -0x93
    + input[8] * -0x17
    + input[5] * 6
    + input[0x14] * 0x99
    + input[0x10] * 0xD4
    + input[0xF] * 0xF2
    + input[0xC] * 0xB5
    + input[10] * -0xB8
    + input[2] * -0x35
    + input[9] * -0x98
    + input[0xD] * -0xE5
    + -0x65D
    + input[4] * 0x3F
    + input[0] * 0x9D
    + input[1] * 0xE
    + input[0x11] * 0xE
    + input[0x16] * -0xDB
    + input[0x12] * 0x61
    + input[7] * 0x1B
    + input[0x15] * -0x97
    == 0
)

solver.add(
    input[9] * 0xF6
    + input[4] * -0x28
    + 0x11400
    + input[0xC] * -0xB2
    + input[10] * -0xE2
    + input[0xD] * -0x90
    + input[0x16] * 0x62
    + input[6] * 0xD3
    + input[0x11] * -0x7A
    + input[0xB] * -0xAD
    + input[8] * 0x1D
    + input[0x14] * 0x48
    + input[2] * -0x17
    + input[7] * -0x34
    + input[3] * 0x9B
    + input[0x13] * -0x12
    + input[0xF] * 0x7A
    + input[0x15] * -0x83
    + input[0x10] * 0xAC
    + input[5] * -0xE3
    + input[0xE] * -0xB5
    + input[0x12] * -0x8F
    + input[0] * 0xFC
    == 0
)

solver.add(
    input[0x12] * -0x32
    + input[0x13] * 0x50
    + input[4] * -0x4F
    + input[0xB] * 0x4F
    + input[0] * 0x33
    + input[3] * -0xAB
    + input[8] * -0x98
    + input[0x15] * -0xCB
    + input[0x16] * 0x6A
    + input[9] * 0x95
    + 0xFDE0
    + input[2] * -0xC1
    + input[6] * -0x99
    + input[5] * -0x40
    + input[0x14] * -0x72
    + input[0xF] * -0xF9
    + input[0xC] * -0xFB
    + input[1] * 0xDC
    + input[0xE] * -0xF9
    + input[0x11] * 0x17
    + input[0x10] * -0x14
    + input[7] * 0x7A
    + input[0xD] * 0x3D
    + input[10] * 0xDD
    == 0
)

solver.add(
    input[0x16] * -0xFD
    + input[4] * 0x85
    + input[0xB] * -0x29
    + input[0x11] * 0x2A
    + input[0] * 0xE3
    + input[1] * -0x84
    + input[9] * 0xAD
    + input[6] * 0x4C
    + input[0x14] * 0xF4
    + input[5] * -0x2D
    + -0x21CF
    + input[7] * -0xC6
    + input[0xE] * 0x4C
    + input[0x15] * -0x5A
    + input[3] * 0x65
    + input[0xF] * -0xFE
    + input[8] * -0x29
    + input[2] * -0x17
    + input[0x13] * 0x8A
    + input[0xD] * -0x78
    + input[0x10] * 0x6D
    + input[0x12] * -0x30
    + input[10] * 0xA1
    + input[0xC] * 0x8A
    == 0
)

solver.add(
    input[10] * -0xB
    + input[0xE] * 0x54
    + input[0x14] * 0x5B
    + input[2] * 0xDA
    + input[3] * -0x8E
    + input[0x13] * 0x4C
    + input[0x15] * -0xEC
    + input[0x10] * -0x81
    + input[9] * -0x5C
    + input[0x16] * -0xDD
    + input[4] * 0xAC
    + input[0xF] * 0xE5
    + input[7] * -0xF9
    + input[8] * -0x32
    + input[5] * 0xBD
    + input[0x12] * -0xBD
    + input[0xD] * -100
    + input[0xB] * 0x5D
    + input[1] * 0x8B
    + input[0xC] * 0x89
    + input[0] * -0x1E
    + input[0x11] * -0x7C
    + -0x9BF
    + input[6] * -0x1E
    == 0
)

solver.add(
    input[0xB] * -0xE2
    + input[6] * -0x4B
    + input[0x15] * -10
    + input[8] * 0x33
    + input[0x16] * 0x72
    + input[0x14] * -0x80
    + input[5] * -0xDF
    + input[7] * 0xF9
    + input[4] * 0x11
    + input[0x11] * -0xC1
    + input[0] * 0x74
    + input[0x12] * 0xF6
    + input[0x10] * 0xDC
    + input[0xF] * 0x65
    + input[0xE] * 0xB2
    + input[0xC] * -0x42
    + input[10] * -0x42
    + input[2] * 0x24
    + input[9] * -0xD4
    + input[0x13] * 0x73
    + input[0xD] * -0x86
    + input[3] * 0xD7
    + -0xE3F6
    + input[1] * 0x76
    == 0
)

solver.add(
    input[0x10] * -0x9C
    + input[2] * 0x67
    + input[0xC] * -0x23
    + input[8] * -0x48
    + input[6] * -0xD7
    + input[7] * -0x84
    + input[1] * 10
    + input[0xE] * -0xD7
    + input[0xB] * 0x62
    + input[0xF] * -0x51
    + input[0] * 0xBC
    + input[0x16] * -0x4C
    + 0xD3BB
    + input[0x13] * -0x98
    + input[0xD] * -0x53
    + input[0x11] * -0x77
    + input[0x15] * -0x6C
    + input[3] * 0x74
    + input[0x14] * 0x38
    + input[5] * 0x46
    + input[9] * -0x9C
    + input[4] * 0xDB
    + input[10] * -0x76
    + input[0x12] * 0x2E
    == 0
)

check = solver.check()
print(check)

for i in range(0x17):
    print(chr(solver.model()[input[i]].as_long()), end="")
